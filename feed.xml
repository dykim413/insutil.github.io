<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="https://dykim413.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://dykim413.github.io/" rel="alternate" type="text/html" /><updated>2019-11-22T21:02:29+09:00</updated><id>https://dykim413.github.io/feed.xml</id><title type="html">사람과 기술을 연결하는 도구 제작소</title><subtitle></subtitle><author><name>insutil</name></author><entry><title type="html">Java static</title><link href="https://dykim413.github.io/study/2019/11/19/static/" rel="alternate" type="text/html" title="Java static" /><published>2019-11-19T13:00:00+09:00</published><updated>2019-11-19T13:00:00+09:00</updated><id>https://dykim413.github.io/study/2019/11/19/static</id><content type="html" xml:base="https://dykim413.github.io/study/2019/11/19/static/">&lt;p&gt;블로그 개설 후 제대로 된 첫 포스팅 작성입니다.&lt;/p&gt;
&lt;p&gt;첫 포스팅 이니 만큼 어떤 내용을 다뤄야 하나 고민을 하다가&lt;/p&gt;
&lt;p&gt;기초부터 잘 다지고 완전히 내것으로 만들자는 생각에 그중 처음으로&lt;/p&gt;
&lt;p class=&quot;magb30&quot;&gt;자바의 static 키워드에 대해 얘기해 볼까합니다.&lt;/p&gt;

&lt;p&gt;static 키워드는 프로그래밍 에서 '전역', '정적', 거기에 '공유' 등의 의미로 해석될 수 있습니다.&lt;/p&gt;
&lt;p&gt;static 에 대해 얘기할때 빠질 수 없는게 메모리 할당과 관련된 것인데,&lt;/p&gt;
&lt;p class=&quot;magb30&quot;&gt;java 에서 메모리를 할당 받는 방법은 크게 2가지로 볼 수 있습니다.&lt;/p&gt;

&lt;p class=&quot;fwb&quot;&gt;① 객체(인스턴스) 생성&lt;/p&gt;
&lt;p class=&quot;fwb magb30&quot;&gt;② static 사용&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;500&quot; alt=&quot;1&quot; src=&quot;https://user-images.githubusercontent.com/55611187/69144846-9aef2400-0b0f-11ea-9d62-bd5db26dd6f8.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;위 그림을 보면 객체 생성을 하지않아 메모리를 할당받지 못했기 때문에&lt;/p&gt;
&lt;p class=&quot;magb20&quot;&gt;num 이라는 변수에 접근할 수 없습니다.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;500&quot; alt=&quot;2&quot; src=&quot;https://user-images.githubusercontent.com/55611187/69144910-c114c400-0b0f-11ea-87de-b50284309530.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;이번 그림을 보시면 new 연산자를 통해 객체(인스턴스)를 생성.&lt;/p&gt;
&lt;p class=&quot;magb20&quot;&gt;메모리에 할당이 되었기 때문에 접근에 문제가 없는걸 볼 수 있습니다.&lt;/p&gt;

&lt;p&gt;다음으로 static 사용한 예를 보시죠.&lt;/p&gt;
&lt;p&gt;&lt;img width=&quot;500&quot; alt=&quot;3&quot; src=&quot;https://user-images.githubusercontent.com/55611187/69144925-ca059580-0b0f-11ea-958f-09944e385f97.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;변수를 static 으로 선언했을 뿐인데 객체 생성 없이 class를 통해 바로 접근 할 수 있습니다.&lt;/p&gt;
&lt;p&gt;그럼 여기서 한가지 드는 의문.. 그렇다면 굳이 객체 생성을 하지 않고&lt;/p&gt;
&lt;p&gt;가능한 모든 변수 와 메서드를 static 으로 선언해서 사용하면 되지 않을까??&lt;/p&gt;
&lt;p&gt;여기에서 static 의 장.단점이 극명하게 드러납니다.&lt;/p&gt;

&lt;p&gt;그것을 다루기 전에 JVM의 memory 구조에 대해 잠깐 얘기해 보겠습니다.&lt;/p&gt;
&lt;img width=&quot;560&quot; alt=&quot;1&quot; src=&quot;https://user-images.githubusercontent.com/55611187/69149816-a85ddb80-0b1a-11ea-9eae-d5789d314f7b.png&quot;&gt;
&lt;p&gt;사실 JVM 구조만 가지고 얘기를 해도&lt;/p&gt;
&lt;p&gt;포스팅의 모든 지면을 할애해도 부족할 만큼 언급하고 싶은 내용이 많습니다만.. &lt;/p&gt;
&lt;p&gt;static keyword 관련된 내용만 최대한 간단히 훓고 지나가겠습니다.&lt;/p&gt;

&lt;p class=&quot;magt30&quot;&gt;제일 먼저 개발자가 작성한 .java 파일을 compiler 가 .class (byte code)로 변환 합니다.&lt;/p&gt;
&lt;p&gt;다음으로 변환된 .class 파일을 class loder가 JVM의 메모리 영역( Runtime data area ) 에 적재합니다.&lt;/p&gt;
&lt;p&gt;메모리에 적재된 class 파일은 execution engine 에 의해 실행됩니다.&lt;/p&gt;

&lt;p&gt;그리고 보시면 Method Area (Class Area, Code Area 라고도 불립니다.) 가 보입니다.&lt;/p&gt;
&lt;p&gt;바로 이 Method Area에 Static 변수가 저장됩니다. (그 외에도 variable, method, type, constant 관련 정보도 저장.)&lt;/p&gt;
&lt;p&gt;저장되는 시점은 class 파일이 메모리에 로드되는 시점입니다.&lt;/p&gt;
&lt;p&gt;즉 데이터의 메모리 할당이 컴파일 시점에 이루어 지는 것입니다.&lt;/p&gt;

&lt;p class=&quot;magt30&quot;&gt;이렇게 메모리에 로드되고 나면 런탐임 중에 필요할 때 마다 동적으로 할당 및 해제되는&lt;/p&gt;
&lt;p&gt;동적 데이터와 달리 어플리케이션의 실행 부터 종료까지 메모리에 로드된 채로 남아 있게 됩니다.&lt;/p&gt;

&lt;p&gt;이런 특징으로 인해 static 은 그 기능 과 역할이 분명히 구분되어 집니다.&lt;/p&gt;

&lt;p class=&quot;magt30&quot;&gt;java에서 static 이 사용되는 영역은 변수, 메서드, 클래스가 있고 static 블럭 도 존재합니다.&lt;/p&gt;
&lt;p&gt;하나씩 짚어보겠습니다.&lt;/p&gt;

&lt;p class=&quot;magt30&quot;&gt;● static 변수 (클래스 변수)는&lt;/p&gt;
    &lt;p class=&quot;magl30&quot;&gt;- 하나의 메모리 영역을 모든 인스턴스가 공유합니다.&lt;/p&gt;
    &lt;p class=&quot;magl30&quot;&gt;- 특정 인스턴스에 종속되지 않습니다.&lt;/p&gt;
    &lt;p class=&quot;magl30&quot;&gt;- 종합해보면 인스턴스 없이도 사용 가능하다~ 가 됩니다.&lt;/p&gt;

&lt;p class=&quot;magt20&quot;&gt;● static 메서드&lt;/p&gt;
    &lt;p class=&quot;magl30&quot;&gt;- 클래스 메서드 라고도 하고, 상속 클래스에서 보이지 않습니다.&lt;/p&gt;
    &lt;p class=&quot;magl30&quot;&gt;- Override 할 수 없습니다.&lt;/p&gt;

&lt;p class=&quot;magt20&quot;&gt;● static 클래스&lt;/p&gt;
    &lt;p class=&quot;magl30&quot;&gt;- 중첩 클래스(nested class) 에만 사용 가능합니다.&lt;/p&gt;
    &lt;p class=&quot;magl30&quot;&gt;- 상위 클래스의 멤버 필드 중에는 static 필드에만 접근 가능합니다.&lt;/p&gt;
    &lt;p class=&quot;magl30&quot;&gt;- 이런 특징은 유사 클래스를 하나로 묶어 관리와 사용을 용이하게 할 수 있습니다.&lt;/p&gt;

&lt;p class=&quot;magt20&quot;&gt;● static 블럭&lt;/p&gt;
    &lt;p class=&quot;magl30&quot;&gt;- 클래스의 내부에 만들 수 있는 초기화 블럭입니다.&lt;/p&gt;
    &lt;p class=&quot;magl30&quot;&gt;- 클래스가 메모리에 로드 될때(초기화 될때) 단 한번 실행됩니다.&lt;/p&gt;

 &lt;p class=&quot;magt30&quot;&gt;여기까지 java 에서 static 이 사용되는 영역과 그에 따른 의미를 살펴보았습니다.&lt;/p&gt;

 &lt;p class=&quot;magt20&quot;&gt;그러면 이제 static 의 장.단점을 정리해보겠습니다.&lt;/p&gt;

 &lt;p class=&quot;magt20&quot;&gt;● 장점&lt;/p&gt;
     &lt;p class=&quot;magl30&quot;&gt;- 공유되는 자원입니다. 인스턴스 생성때 마다 메모리에 올리고 초기화 하지 않고, 최초의 자원을 모든 인스턴스가 공유합니다.&lt;/p&gt;
     &lt;p class=&quot;magl30&quot;&gt;- 위와 같은 이유로 잘만 사용하면 메모리를 효율적으로 사용할 수 있습니다.&lt;/p&gt;
     &lt;p class=&quot;magl30&quot;&gt;- 인스턴스 생성없이 바로 참조하기 때문에 속도가 빠릅니다.&lt;/p&gt;

 &lt;p class=&quot;magt20&quot;&gt;● 단점&lt;/p&gt;
     &lt;p class=&quot;magl30&quot;&gt;- 무분별한 사용은 메모리 오남용을 발생시킬 수 있습니다.&lt;/p&gt;
     &lt;p class=&quot;magl30&quot;&gt;- 전역적인 특징으로 인해 추론과 테스트를 힘들게 합니다.&lt;/p&gt;
       &lt;p class=&quot;magl30&quot;&gt;(공유되는 자원이므로 코드의 여러부분에서 영향을 받을 수 있게 되므로 추적이 힘들어 집니다.)&lt;/p&gt;
     &lt;p class=&quot;magl30&quot;&gt;- 객체 지향의 패러다임과 맞지 않습니다.&lt;/p&gt;
       &lt;p class=&quot;magl30&quot;&gt;(static 변수는 각 객체의 데이터들이 외부로 부터 함부로 접근 할 수 없고 수정될 수 없어야 한다는 캡슐화에 위배됩니다.)&lt;/p&gt;
     &lt;p class=&quot;magl30&quot;&gt;- 오버라이딩 할 수 없는 멤버들로 인해 클래스의 확장성을 떨어뜨립니다.&lt;/p&gt;
     &lt;p class=&quot;magl30&quot;&gt;- java 와 같은 객체지향 언어들의 장점인 재사용성 을 떨어뜨리고 interface 구현에 사용할 수 없습니다.&lt;/p&gt;

&lt;p class=&quot;magt20&quot;&gt;이렇게 보면 단점이 더 많은것 같은데요.&lt;/p&gt;
&lt;p&gt;실제로 제가 본 어떤 개발자의 포스팅에서는&lt;/p&gt;
&lt;p&gt;java 에서의 static 사용을 거의 &lt;b&gt;악&lt;/b&gt;으로 규정하는 내용도 보았습니다;;&lt;/p&gt;
&lt;p&gt;하지만 분명 제대로 알고 사용한다면 단점을 최소화 하고 장점을 극대화 해서&lt;/p&gt;
&lt;p&gt;어플리케이션 성능에 도움이 될 수있습니다.&lt;/p&gt;

&lt;p class=&quot;magt30&quot;&gt;마지막으로 한가지만 더 언급하자면 java에서 final 변수에는 관례적으로 static 을 붙여서 사용하는 경우가 많습니다.&lt;/p&gt;
&lt;p&gt;왜 그런가를 생각해 보면 static 이라는 녀석에 대해 또 한번 곱씹을 수 있는 부분 인데요.&lt;/p&gt;
&lt;p&gt;final 은 단한번  초기화 가능함을 뜻합니다.&lt;/p&gt;
&lt;p class=&quot;magt30&quot;&gt;다시 말해 해당 변수의 용도와 의미가 최초 한번 설정되면, 변하지 않고 고정되어야 한다는 뜻입니다.&lt;/p&gt;
&lt;p&gt;클래스의 모든 인스턴스에서 사용해야 하는 데이터고 바뀌지 않을 꺼라면, 인스턴스가 생성될때 마다&lt;/p&gt;
&lt;p&gt;메모리를 할당받고 초기화 시키지 말고, 최초 한번 메모리에 올리고 그 공간을 모든 인스턴스가 쭈~우욱~&lt;/p&gt;
&lt;p&gt;사용하게 한다면??? 매번 메모리를 할당 하는것 보다 효율적일 수 있습니다.&lt;/p&gt;
&lt;p&gt;또 final은 상수와 같은 (정확히 final = 상수 는 아닙니다.) 의미이니 동시성 문제도 없습니다.&lt;/p&gt;
&lt;p&gt;이런 이유로 멤버 final 변수는 static final로 선언하는 것이 관례가 된거 같습니다.&lt;/p&gt;

&lt;p class=&quot;magt30&quot;&gt;여기까지 java 의 static 에 관해 여기저기 주워듣고 배운것을 나름 정리해 보았습니다.&lt;/p&gt;

&lt;p class=&quot;magt30&quot;&gt;두서없는 글 읽어주셔서 감사합니다!&lt;/p&gt;</content><author><name>김도영</name><email>kdy6721@gmail.com</email></author><category term="[&quot;study&quot;]" /><summary type="html">블로그 개설 후 제대로 된 첫 포스팅 작성입니다. 첫 포스팅 이니 만큼 어떤 내용을 다뤄야 하나 고민을 하다가 기초부터 잘 다지고 완전히 내것으로 만들자는 생각에 그중 처음으로 자바의 static 키워드에 대해 얘기해 볼까합니다.</summary></entry><entry><title type="html">인스유틸 블로그 첫걸음</title><link href="https://dykim413.github.io/instory/study/2019/11/17/created-blog/" rel="alternate" type="text/html" title="인스유틸 블로그 첫걸음" /><published>2019-11-17T13:00:00+09:00</published><updated>2019-11-17T13:00:00+09:00</updated><id>https://dykim413.github.io/instory/study/2019/11/17/created-blog</id><content type="html" xml:base="https://dykim413.github.io/instory/study/2019/11/17/created-blog/">&lt;h2 class=&quot;&quot;&gt;• 동기&lt;/h2&gt;
&lt;p&gt;2019년 무더위가 한창인 8월 인스유틸 에 입사 하면서 그동안 접해보지 않았던&lt;/p&gt;
&lt;p&gt;기술로 개발을 하는 프로젝트에 곧바로 투입 되었다.&lt;/p&gt;

&lt;p&gt;덕분에? 많은 학습이 필요했고 늘 그렇듯 검색 또 검색을 하며 이런 저런 지식을&lt;/p&gt;
&lt;p&gt;머리속에 구겨넣던 중 우아한 형제들의 기술 블로그를 알게 되었다.&lt;/p&gt;
&lt;p&gt;블로그 이글 저글을 읽어 보면서 동료들과 함께 성장해 나가기 위한 그들의 모습이,&lt;/p&gt;
&lt;p&gt;기업 문화가 좋아보였다.&lt;/p&gt;

&lt;p&gt;마침 그때 나는 프로젝트를 진행하며 소통과 공유에 답답함을 많이 느끼던 중이었다.&lt;/p&gt;

&lt;p&gt;부러우면 지는거다 라는 우스갯 소리처럼 부러워만 하기보다 우리회사 도 이런 블로그를&lt;/p&gt;

&lt;p&gt;만들어 보면 좋겠다는 생각을 했고, 생각을 했으면.. 어떻게?? 그렇다 바로 실행에 옮겨야지!&lt;/p&gt;


&lt;p&gt;우아한형제들의 기술 블로그도 그러하고 요즘 github page 를 활용한 블로그 가 대세인것 같다.&lt;/p&gt;

&lt;p&gt;대세는 거스르려 하지 말고 따르자.&lt;/p&gt;

&lt;p&gt;바로 jekyll 을 활용한 블로그 생성에 돌입.&lt;/p&gt;

&lt;p&gt;잠깐씩 짬을 내서 1~2일 이면 끝날 줄 알았던 블로그 작업이 theme 를 고르는 것 부터

&lt;p&gt;plugin 연동 등을 하다 보니 갖은 삽?질 과 오기로 안되는걸 부여잡고 끙끙대고,&lt;/p&gt;

&lt;p&gt;이런저런 핑계로 미루다보니 3주정도의 시간이 걸린것 같다.&lt;/p&gt;

&lt;h2 class=&quot;magt50&quot;&gt;• 참여&lt;/h2&gt;
&lt;p&gt;이렇게 블로그는 만들어 졌지만 구성원 들이 얼마나 받아들이고 활성화가 될지는 미지수다.&lt;/p&gt;

&lt;p&gt;지금 블로그를 만들고 간단히 소회를 적어내려 가면서도 나 또한 이런 글을 적는다는게&lt;/p&gt;

&lt;p&gt;적잖이 부담이 되는게 사실이다.&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;나혼자를 위해 써내려 가는 일기가 아니라 모두와 공유하기 위한 글을 적는다는것.&lt;/p&gt;

&lt;p&gt;나름의 용기도 필요하고 의지가 동반되어야 가능하다고 생각한다.&lt;/p&gt;

&lt;p&gt;기본적으로 이 블로그는 인스유틸 구성원들이 업무를 진행하며&lt;/p&gt;

&lt;p&gt;각자가 배우고 느끼고 학습한 내용을 혼자의 기억으로 남기지 말고 기록을 함으로써&lt;/p&gt;

&lt;p&gt;함께 공유하고, 함께 배우며, 함께 성장해 나가는 그 첫걸음 이 되었으면 좋겠다.&lt;/p&gt;

&lt;p&gt;뭐든지 새로운것을 처음 받아들일때는 어느정도의 진입장벽은 있기 마련이고, 그것을 받아들이고&lt;/p&gt;

&lt;p&gt;이 블로그를 만들고자 한 취지를 공감해 주었으면 한다.&lt;/p&gt;

&lt;h2 class=&quot;magt50&quot;&gt;• 이제부터 시작&lt;/h2&gt;
&lt;p&gt;인스유틸 이라는 회사는 자신의 분야에서 20년 이상의 경력을 가진 개발자 와 신입 주니어 개발자,&lt;/p&gt;
&lt;p&gt;그리고 여기저기서 10여년간 개발을 해온 나 까지 포함해 개발자 8명, 경영지원을 해주시는 분 까지&lt;/p&gt;
&lt;p&gt;약 10명 정도로 구성된 이제 시작하는 작은 회사이다.&lt;/p&gt;

&lt;p&gt;그러다 보니 체계를 잡아나가야 할 부분들이 많다는 생각이 든다.&lt;/p&gt;
&lt;p&gt;코딩 표준화 부터, 프로젝트를 시작하고 마치기 까지 일정관리, 이슈관리,&lt;/p&gt;
&lt;p&gt;각자의 업무진행 상황을 공유하고 진행 하면서 생기는 이슈를 공론화 하고 &lt;/p&gt;
&lt;p&gt;이를 통해 끊임없이 소통하고 함께 성장해 나갈 수 있기를 바래본다.&lt;/p&gt;

&lt;p&gt;일을 더 잘하고 싶은 마음 누구나 같을것이다.&lt;/p&gt;
&lt;p&gt;좋은 구성원(개발자)은 내가 얼마나 많이 알고, 뛰어난 역량을 가졌냐가 아니라,&lt;/p&gt;
&lt;p&gt;얼마나 많은 사람이 자신으로 인해 좋은 생각을 하고 좋은 변화를 받아들이고,&lt;/p&gt;
&lt;p&gt;그로 인해 좋은 성과를 낼수 있게 하는 사람 이라고 생각한다.&lt;/p&gt;
&lt;p&gt;그를 통해 자신또한 또 한계단 성장 할 수 있으리라 본다.&lt;/p&gt;

&lt;p&gt;변화에 대해 열린 마음을 갖고 함께 성장해 나갈 인스유틸 구성원들 모두를 응원한다.&lt;/p&gt;</content><author><name>김도영</name><email>kdy6721@gmail.com</email></author><category term="[&quot;inStory&quot;, &quot;study&quot;]" /><summary type="html">• 동기 2019년 무더위가 한창인 8월 인스유틸 에 입사 하면서 그동안 접해보지 않았던 기술로 개발을 하는 프로젝트에 곧바로 투입 되었다.</summary></entry></feed>